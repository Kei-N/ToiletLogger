@page "/"

@using ToiletLogger.Data
@inject SQLiteDatabase SQLiteDatabase

<h1>トイレ記録</h1>

<div align="center">
    <p></p>
    <button class="buttonNeumorphism" style="background-color:#AFEEEE" @onclick="UrineButtonClick">小</button>
    <button class="buttonNeumorphism" style="background-color:#F5DEB3" @onclick="StoolButtonClick">大</button>
    <p></p>
</div>

<table class="table">
    <thead>
        <tr>
            <th>@DateTime.Today.ToShortDateString()/@DateTime.Today.ToString("ddd")</th>
            <th>小</th>
            <th>大</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <th>回数</th>
            <td>@toiletlogs.Where(x => x.Date.Date == DateTime.Today).Where(x => x.ToiletType == ToiletType.Urine).Count()</td>
            <td>@toiletlogs.Where(x => x.Date.Date == DateTime.Today).Where(x => x.ToiletType == ToiletType.Stool).Count()</td>
        </tr>
    </tbody>
</table>
<table class="table">
    <thead>
        <tr>
            <th>日時</th>
            <th>種別</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var toiletLog in toiletlogs.Where(x => x.Date.Date == DateTime.Today))
        {
            <tr>
                <td>@toiletLog.Date</td>
                @if (toiletLog.ToiletType == ToiletType.Urine)
                {
                    <td>小</td>
                }
                else
                {
                    <td>大</td>
                }
                <td><button @onclick="(e=>DeleteButtonClick(toiletLog))">削除</button></td>
            </tr>
        }
    </tbody>
</table>

@code {
    Guid userId = Guid.Empty; // TODO: ユーザーIDを発行できるようにする
    List<ToiletLog> toiletlogs = new List<ToiletLog>();

    protected override async Task OnInitializedAsync()
    {
        toiletlogs = await SQLiteDatabase.GetToiletLogsAsync(userId);
    }

    private async Task UrineButtonClick()
    {
        var toiletLog = new ToiletLog
        {
            Id = Guid.NewGuid(),
            ToiletType = ToiletType.Urine,
            Date = DateTime.Now,
            UserId = userId,
        };
        await SQLiteDatabase.SaveItemAsync(toiletLog);
        await this.OnInitializedAsync();
    }

    private async Task StoolButtonClick()
    {
        var toiletLog = new ToiletLog
        {
            Id = Guid.NewGuid(),
            ToiletType = ToiletType.Stool,
            Date = DateTime.Now,
            UserId = userId,
        };
        await SQLiteDatabase.SaveItemAsync(toiletLog);
        await this.OnInitializedAsync();
    }

    private async Task DeleteButtonClick(ToiletLog toiletLog)
    {
        await SQLiteDatabase.DeleteItemAsync(toiletLog);
        await this.OnInitializedAsync();
    }
}